import org.easyb.exception.VerificationException
import org.codehaus.groovy.runtime.NullObject

// missing tests around behaviorcategory

it "should throw a verification exception if > fails", {
  ensureThrows(VerificationException.class) {
    1.shouldBeGreaterThan 2, "2 ! > 1"
  }

  ensureThrows(VerificationException.class) {
    1.shouldBeGreaterThan 1, "1 ! > 1"
  }
}

it "should throw ex if less than isn't", {
  ensureThrows(VerificationException.class) {
    1.shouldBeLessThan 1, "1 ! < 1"
  }
}

it "should be equal testing", {
  1.shouldBeEqual 1
  1.shouldBeEqual 1, "1==1"
  1.shouldBeEqualTo 1, "1==1 Too!"
  1.shouldEqual 1, "1 == 1 different syntax"
}

// can't test this one?

//it "should throw verification failure comparing null to a value", {
//  zz = NullObject
//  ensureThrows(VerificationException.class) {
//    try {
//    zz.isEqual 1, "null is not 1"
//    } catch ( Exception ex ) {       ex.printStackTrace()}
//  }
//}

it "should not equal 1", {
  1.shouldNotEqual 2, "really,  they shouldnt be"
}
it "should not equal 2", {
  1.shouldntBe 2, "nope"
}
it "should not equal 3", {
  1.shouldntEqual 7, "either!"
}
it "should not equal 4", {
  1.shouldNotEqual 2
}

interface X {}
class BC_A implements X {}
class BC_B implements X {}

it "isnt'a", {

  bcA = new BC_A()
  bcA.shouldBeAn BC_A.class, "we are actually the same"
  bcA.shouldBeAn X.class, "we are as well"

  bcA.shouldNotBeA BC_B.class
  bcA.shouldNotBeA BC_B.class, "as its b not a"
  bcA.shouldNotBeAn BC_B.class
  bcA.shouldNotBeAn BC_B.class, "as its b not a"

}

it "should not have but does", {
  ensureThrows(VerificationException.class) {
    ['a', 'b'].shouldNotHave 'a'
  }
}

class F { int aa; int bb;
  def contains(o) {return true}}
class F1 { String x;
  def contains(o) { return false }}

it "shouldn't contain values for", {
  f = new F()
  f.aa = 1
  f.bb = 2
  ensureThrows(VerificationException.class) {
    f.shouldNotHave( [aa:1, bb:2] )
  }
  
  f.shouldNotHave( [aa:2, bb:1] )

  ensureThrows(VerificationException.class) {
    f.shouldNotHave( [bb:2] )
  }
}

it "more shouldn'ts", {
  f = new F1(x:'X')
  f.shouldNotHave([x:'Y'])
  ensureThrows(VerificationException.class) {
    f.shouldNotHave([x:'X'])
  }
}

it "should contain values for", {
  f = new F()
  f.aa = 1
  f.bb = 2

  f.shouldHave( [aa:1, bb:2] )
  f.shouldHave( [bb:2] )
  ensureThrows(VerificationException.class) {
    f.shouldHave([aa:2])
  }
  f.shouldHave 2
}


it "more should contain", {
  ensureThrows(VerificationException.class) {
    [a:1].shouldHave([bb:1])
  }
  ensureThrows(VerificationException.class) {
    "wibble".shouldHave("dance")
  }
  ensureThrows(VerificationException.class) {
    ['aa'].shouldHave(['bb'])
  }
  ensureThrows(VerificationException.class) {
    [].shouldHave(['bb'])
  }
  ['aa'].shouldHave(['aa'])
  f1 = new F1(x:'X')
  ensureThrows(VerificationException.class) {
    f1.shouldHave( [x:'Y'])
  }
  f1.shouldHave([x:'X'])
  ensureThrows(VerificationException.class) {
    f1.shouldHave 2
  }
}

it "more contains", {
 ensureThrows(VerificationException.class) {
   [a:1].shouldHave( "b" )
 }
}